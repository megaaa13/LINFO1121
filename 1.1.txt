1: An abstract data type is defined in its behavior, but not implemented
All of abstract class and interface are ADTs, but their utility varies.

2: Adding and removing elements at the end of the list is not efficient at all.
For the pop method, we need to browse all the list, find the last one and keep a pointer on the previous one,
to set its next to null to remove the last from the list.
For the push, that's ok.

3:

5: they are equivalent for me, the time complexity is n for all of them.
Maybe the size() in the for loop make it slower.

6: the tilde approximation work like the big O.
With the other notation, we can evaluate a program by the best case (big omega),
the worst case (big o), and the average case (big theta)

7: the growth order of the program is a little more than 2. We can suppose than the running time for 128000 would be 82 seconds.

8: voir Oz non mais vrmt flemme
-Xmx stands for the max memory used by the JVM.
-Xms stands for the base memory allocated while the JVM started.
That can influence the speed if
the memory needed by the program is more important than the max available,
or if the start memory is too important, the program could need time to allocate it.

9: good tests set ?
Borderlines cases are the most important to focus on.
If a is odd and b even, it'll not return an int.
Random datas can create case we didn't think of.
A fixed seed permits to test something random more than one time, to see if we resolve the problem.
Jacoco says if the test goes through all the code.
By trying the Doubling ratio test to see if the time is increasing as expected.
(pas trop s√ªr)
